# Default values for s3www.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Few configs here are left as it is as these are generated by default chart creation command
# THIS CONFIGURATION IS ALSO MENTIONED IN values.tpl.yaml FILE & HERE ALSO, INCASE WE WANNA GO WITH PULL BASED DEPLOYMENT WE CAN USE THIS HELM CHART FOR THE SAME WHEREAS UNDER TF FOLDER I HAVE ALSO MENTIONED JUST IN CASE THESE CONFIG CAN BE TWEAKED BASED ON NEEDS

# Default values for s3www-stack
global:
  environment: development
  bucketName: s3www-content  # Single bucket name for both s3www and MinIO

# replicaCount: 1

image:
  repository: s3www
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: "s3www"  # Force consistent naming regardless of release name

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "s3www"

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
# securityContext: 
#   capabilities:
#     drop:
#     - ALL
#   readOnlyRootFilesystem: true
#   runAsNonRoot: true
#   runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  className: "nginx"
  annotations: 
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
  hosts:
    - host: s3www.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: s3www-tls
  #    hosts:
  #      - s3www.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Temporarily commented out probes
# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

# Horizontal Pod Autoscaler configuration
autoscaling:
  # s3www HPA configuration
  s3www:
    enabled: true  # Enable to auto-scale s3www pods based on metrics
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    annotations: {}
    # Advanced scaling behavior (optional)
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
        - type: Percent
          value: 100
          periodSeconds: 15
      scaleUp:
        stabilizationWindowSeconds: 0
        policies:
        - type: Percent
          value: 100
          periodSeconds: 15
        - type: Pods
          value: 4
          periodSeconds: 60
        selectPolicy: Max
  
  # MinIO HPA configuration  
  minio:
    enabled: true  # Enable to auto-scale MinIO pods based on metrics
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 85
    annotations: {}
    # Advanced scaling behavior (optional)
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
        - type: Percent
          value: 50
          periodSeconds: 60
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
        - type: Percent
          value: 100
          periodSeconds: 60

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

# Pod affinity/anti-affinity rules
affinity:
  # Spread s3www pods across nodes (example)
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - s3www
        topologyKey: kubernetes.io/hostname

s3www:
  enabled: true
  image: y4m4/s3www:latest
  port: 8080
  # Bucket name - references global value
  name: s3www
  replicas: 2
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi
  env:
    accessKeyName: AWS_ACCESS_KEY_ID
    secretKeyName: AWS_SECRET_ACCESS_KEY

minio:
  name: minio
  replicas: 3
  enabled: true
  image: quay.io/minio/minio:latest
  accessKey: ""  # used only if existingSecret is not defined
  secretKey: ""
  existingSecret: minio-credentials
  secretKeys:
    accessKeyKey: accesskey
    secretKeyKey: secretkey
  # Bucket name - references global value
  port: 9000
  consolePort: 9090
  service:
    type: ClusterIP
    labels:
      app.kubernetes.io/component: minio
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9000"
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi
  extraArgs:
    - server
    - /data
    - "--console-address"
    - ":9090"
  persistence:
    enabled: true
    storageClass: standard  # or whatever your cluster supports
    accessMode: ReadWriteOnce
    size: 1Gi

# Upload job configuration
uploadJob:
  # Job execution settings
  backoffLimit: 3  # Number of retries before considering job failed
  
  # Automatic cleanup settings
  ttlSecondsAfterFinished: 600  # Delete job 10 minutes after completion (null = keep forever)
  
  # Alternative: Manual cleanup settings (commented out - use one approach)
  # keepSuccessfulJobs: 3    # Keep last 3 successful jobs (requires CronJob controller)
  # keepFailedJobs: 1        # Keep last 1 failed job for debugging

fileToServe: |
  Hello from Helm chart!

# Prometheus monitoring configuration
prometheus:
  # Metrics port for s3www application
  metricsPort: 9091
  
  # ServiceMonitor configuration for Prometheus Operator
  serviceMonitor:
    enabled: false  # Set to true when metrics are implemented in s3www
    port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
    annotations: {}
    selector: {}
    namespaceSelector: {}
    relabelings: []
    metricRelabelings: []
    tlsConfig: {}
  
  # Service annotations for Prometheus scraping (alternative to ServiceMonitor)
  service:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9091"
      prometheus.io/path: "/metrics"

